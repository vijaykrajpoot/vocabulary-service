openapi: 3.0.0
servers:
  - url: 'http://localhost:8080'
info:
  description: >-
    This is a sample server Petstore server. For this sample, you can use the api key
    `special-key` to test the authorization filters.
  version: 1.0.0
  title: Vocabulary
  license:
    name: Apache-2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: vocabulary
    description: Vocabulary

paths:
  /pet:
    post:
      tags:
        - vocabulary
      summary: Add a new vocabulary
      description: ''
      operationId: addvocabulary
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/vocabulary'
            application/json:
              schema:
                $ref: '#/components/schemas/vocabulary'
        '405':
          description: Invalid input
    get:
      tags:
        - vocabulary
      summary: Find vocabulary by type
      description: Returns vocabulary
      operationId: getVocabularybyType
      parameters:
        - name: type
          in: query
          description: vocabulary type like business/food/electronics
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Vocabulary'
            application/json:
              schema:
                $ref: '#/components/schemas/Vocabulary'
        '400':
          description: Invalid type supplied
        '404':
    s      description: Vocabulary not found

components:
  requestBodies:
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
  #  securitySchemes:
  #    petstore_auth:
  #      type: oauth2
  #      flows:
  #        implicit:
  #          authorizationUrl: 'http://petstore.swagger.io/api/oauth/dialog'
  #          scopes:
  #            'write:pets': modify pets in your account
  #            'read:pets': read your pets
  #    api_key:
  #      type: apiKey
  #      name: api_key
  #      in: header
  schemas:
    Order:
      title: Pet Order
      description: An order for a pets from the pet store
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      title: Pet category
      description: A category for a pet
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          pattern: '^[a-zA-Z0-9]+[a-zA-Z0-9\.\-_]*[a-zA-Z0-9]+$'
      xml:
        name: Category
    User:
      title: a User
      description: A User who is purchasing from the pet store
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      title: Pet Tag
      description: A tag for a pet
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Vocabulary:
      title: a Vocabulary
      description: A Vocabulary
      type: object
      required:
        - word
        - meaning
      properties:
        word:
          type: string
        meaning:
          type: string
        sentence:
          type: string